"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/motorista/page",{

/***/ "(app-pages-browser)/./services/routeOptimizationService.ts":
/*!**********************************************!*\
  !*** ./services/routeOptimizationService.ts ***!
  \**********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RouteOptimizationService: () => (/* binding */ RouteOptimizationService),\n/* harmony export */   routeOptimizationService: () => (/* binding */ routeOptimizationService)\n/* harmony export */ });\nclass RouteOptimizationService {\n    clearExpiredCache() {\n        const now = Date.now();\n        for (const [key, value] of this.routeCache.entries()){\n            if (now - value.timestamp > this.CACHE_EXPIRY) {\n                this.routeCache.delete(key);\n            }\n        }\n    }\n    getCacheKey(options) {\n        const { startLocation, passengers, destination, optimizeOrder } = options;\n        const startKey = \"\".concat(startLocation.lat(), \",\").concat(startLocation.lng());\n        const destKey = \"\".concat(destination.lat(), \",\").concat(destination.lng());\n        const passengersKey = passengers.map((p)=>\"\".concat(p.id, \"-\").concat(p.position.lat, \",\").concat(p.position.lng)).sort().join('|');\n        return \"\".concat(startKey, \"-\").concat(destKey, \"-\").concat(passengersKey, \"-\").concat(optimizeOrder);\n    }\n    async initializeService() {\n        var _window_google_maps, _window_google;\n        // Aguarda o carregamento da API do Google Maps\n        await this.waitForGoogleMapsAPI();\n        if ((_window_google = window.google) === null || _window_google === void 0 ? void 0 : (_window_google_maps = _window_google.maps) === null || _window_google_maps === void 0 ? void 0 : _window_google_maps.DirectionsService) {\n            this.directionsService = new google.maps.DirectionsService();\n        }\n    }\n    waitForGoogleMapsAPI() {\n        return new Promise((resolve, reject)=>{\n            try {\n                var _window_google_maps, _window_google;\n                // Se já estiver carregada\n                if (window.googleMapsApiLoaded === true && ((_window_google = window.google) === null || _window_google === void 0 ? void 0 : (_window_google_maps = _window_google.maps) === null || _window_google_maps === void 0 ? void 0 : _window_google_maps.DirectionsService)) {\n                    resolve();\n                    return;\n                }\n                // Se houve erro no carregamento\n                if (window.googleMapsApiLoaded === 'error') {\n                    const error = new Error('Google Maps API falhou ao carregar. Verifique se a chave da API está configurada corretamente e se as APIs necessárias estão habilitadas (Maps JavaScript API, Directions API, Geometry API).');\n                    error.code = 'GOOGLE_MAPS_NOT_LOADED';\n                    reject(error);\n                    return;\n                }\n                // Aguarda o carregamento\n                let attempts = 0;\n                const maxAttempts = 50; // 5 segundos máximo\n                const checkInterval = setInterval(()=>{\n                    var _window_google_maps, _window_google;\n                    attempts++;\n                    if (window.googleMapsApiLoaded === true && ((_window_google = window.google) === null || _window_google === void 0 ? void 0 : (_window_google_maps = _window_google.maps) === null || _window_google_maps === void 0 ? void 0 : _window_google_maps.DirectionsService)) {\n                        clearInterval(checkInterval);\n                        resolve();\n                    } else if (window.googleMapsApiLoaded === 'error' || attempts >= maxAttempts) {\n                        clearInterval(checkInterval);\n                        const error = new Error('Timeout ou erro ao carregar Google Maps API. Verifique se a chave da API está configurada corretamente e se as APIs necessárias estão habilitadas (Maps JavaScript API, Directions API, Geometry API).');\n                        error.code = 'GOOGLE_MAPS_NOT_LOADED';\n                        error.details = \"Tentativas: \".concat(attempts, \"/\").concat(maxAttempts);\n                        reject(error);\n                    }\n                }, 100);\n            } catch (error) {\n                const routeError = new Error(\"Erro inesperado ao aguardar Google Maps API: \".concat(error instanceof Error ? error.message : 'Erro desconhecido'));\n                routeError.code = 'UNKNOWN_ERROR';\n                reject(routeError);\n            }\n        });\n    }\n    /**\n     * Calcula a distância entre dois pontos usando a fórmula de Haversine com cache\n     */ calculateDistance(lat1, lng1, lat2, lng2) {\n        // Cria chave para cache (arredonda para 6 casas decimais para evitar cache excessivo)\n        const key = \"\".concat(lat1.toFixed(6), \",\").concat(lng1.toFixed(6), \"-\").concat(lat2.toFixed(6), \",\").concat(lng2.toFixed(6));\n        // Verifica cache\n        if (this.distanceCache.has(key)) {\n            return this.distanceCache.get(key);\n        }\n        const R = 6371; // Raio da Terra em km\n        const dLat = this.toRad(lat2 - lat1);\n        const dLng = this.toRad(lng2 - lng1);\n        const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(this.toRad(lat1)) * Math.cos(this.toRad(lat2)) * Math.sin(dLng / 2) * Math.sin(dLng / 2);\n        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n        const distance = R * c;\n        // Armazena no cache (limita tamanho do cache)\n        if (this.distanceCache.size < 1000) {\n            this.distanceCache.set(key, distance);\n        }\n        return distance;\n    }\n    toRad(value) {\n        return value * Math.PI / 180;\n    }\n    /**\n     * Algoritmo de otimização usando Nearest Neighbor com melhorias e 2-opt\n     */ optimizePassengerOrder(startLocation, passengers, destination) {\n        if (passengers.length <= 1) return passengers;\n        // Primeiro, aplica Nearest Neighbor\n        let optimizedOrder = this.nearestNeighborOptimization(startLocation, passengers, destination);\n        // Em seguida, aplica 2-opt para melhorar a rota\n        if (optimizedOrder.length > 3) {\n            optimizedOrder = this.twoOptImprovement(startLocation, optimizedOrder, destination);\n        }\n        return optimizedOrder;\n    }\n    /**\n     * Algoritmo Nearest Neighbor básico\n     */ nearestNeighborOptimization(startLocation, passengers, destination) {\n        const unvisited = [\n            ...passengers\n        ];\n        const optimizedOrder = [];\n        let currentLocation = startLocation;\n        while(unvisited.length > 0){\n            let nearestIndex = 0;\n            let nearestDistance = this.calculateDistance(currentLocation.lat(), currentLocation.lng(), unvisited[0].position.lat, unvisited[0].position.lng);\n            // Encontra o passageiro mais próximo\n            for(let i = 1; i < unvisited.length; i++){\n                const distance = this.calculateDistance(currentLocation.lat(), currentLocation.lng(), unvisited[i].position.lat, unvisited[i].position.lng);\n                if (distance < nearestDistance) {\n                    nearestDistance = distance;\n                    nearestIndex = i;\n                }\n            }\n            // Adiciona o passageiro mais próximo à rota otimizada\n            const nearestPassenger = unvisited.splice(nearestIndex, 1)[0];\n            optimizedOrder.push(nearestPassenger);\n            currentLocation = new google.maps.LatLng(nearestPassenger.position.lat, nearestPassenger.position.lng);\n        }\n        return optimizedOrder;\n    }\n    /**\n     * Algoritmo 2-opt para melhorar a rota existente\n     */ twoOptImprovement(startLocation, route, destination) {\n        let improved = true;\n        let bestRoute = [\n            ...route\n        ];\n        let bestDistance = this.calculateTotalRouteDistance(startLocation, bestRoute, destination);\n        while(improved){\n            improved = false;\n            for(let i = 1; i < route.length - 2; i++){\n                for(let j = i + 1; j < route.length; j++){\n                    if (j - i === 1) continue; // Skip adjacent edges\n                    // Cria nova rota com 2-opt swap\n                    const newRoute = this.twoOptSwap(route, i, j);\n                    const newDistance = this.calculateTotalRouteDistance(startLocation, newRoute, destination);\n                    if (newDistance < bestDistance) {\n                        bestRoute = newRoute;\n                        bestDistance = newDistance;\n                        route = newRoute;\n                        improved = true;\n                    }\n                }\n            }\n        }\n        return bestRoute;\n    }\n    /**\n     * Executa o swap 2-opt\n     */ twoOptSwap(route, i, j) {\n        const newRoute = [\n            ...route\n        ];\n        // Reverte a ordem dos elementos entre i e j\n        while(i < j){\n            [newRoute[i], newRoute[j]] = [\n                newRoute[j],\n                newRoute[i]\n            ];\n            i++;\n            j--;\n        }\n        return newRoute;\n    }\n    /**\n     * Calcula a distância total de uma rota\n     */ calculateTotalRouteDistance(startLocation, route, destination) {\n        let totalDistance = 0;\n        let currentLocation = startLocation;\n        // Distância do início até o primeiro passageiro\n        if (route.length > 0) {\n            totalDistance += this.calculateDistance(currentLocation.lat(), currentLocation.lng(), route[0].position.lat, route[0].position.lng);\n        }\n        // Distância entre passageiros\n        for(let i = 0; i < route.length - 1; i++){\n            totalDistance += this.calculateDistance(route[i].position.lat, route[i].position.lng, route[i + 1].position.lat, route[i + 1].position.lng);\n        }\n        // Distância do último passageiro até o destino\n        if (route.length > 0) {\n            totalDistance += this.calculateDistance(route[route.length - 1].position.lat, route[route.length - 1].position.lng, destination.lat(), destination.lng());\n        }\n        return totalDistance;\n    }\n    /**\n     * Calcula horários estimados de coleta baseados na rota otimizada\n     */ calculatePickupTimes(startLocation, optimizedPassengers) {\n        let startTime = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : new Date();\n        const pickupTimes = [];\n        let currentTime = new Date(startTime);\n        let currentLocation = startLocation;\n        // Velocidade média estimada (km/h) - pode ser configurável\n        const averageSpeed = 30; // 30 km/h em área urbana\n        const stopTime = 2; // 2 minutos por parada\n        for (const passenger of optimizedPassengers){\n            // Calcula distância até o passageiro\n            const distance = this.calculateDistance(currentLocation.lat(), currentLocation.lng(), passenger.position.lat, passenger.position.lng);\n            // Calcula tempo de viagem em minutos\n            const travelTimeMinutes = distance / averageSpeed * 60;\n            // Adiciona tempo de viagem ao tempo atual\n            currentTime = new Date(currentTime.getTime() + travelTimeMinutes * 60000);\n            pickupTimes.push({\n                passenger,\n                estimatedPickupTime: new Date(currentTime)\n            });\n            // Adiciona tempo de parada\n            currentTime = new Date(currentTime.getTime() + stopTime * 60000);\n            // Atualiza localização atual\n            currentLocation = new google.maps.LatLng(passenger.position.lat, passenger.position.lng);\n        }\n        return pickupTimes;\n    }\n    /**\n     * Calcula a rota otimizada usando Google Directions API\n     */ async calculateOptimizedRoute(options) {\n        const { startLocation, passengers, destination, optimizeOrder = true } = options;\n        try {\n            // Verifica cache primeiro\n            const cacheKey = this.getCacheKey(options);\n            if (this.routeCache.has(cacheKey)) {\n                const cachedRoute = this.routeCache.get(cacheKey);\n                console.log('Rota encontrada no cache');\n                return cachedRoute;\n            }\n            // Aguarda a inicialização do serviço se necessário\n            if (!this.directionsService) {\n                await this.initializeService();\n            }\n            if (!this.directionsService) {\n                const error = new Error('Google Maps API não está carregada');\n                error.code = 'GOOGLE_MAPS_NOT_LOADED';\n                throw error;\n            }\n            // Validação dos parâmetros de entrada\n            if (!startLocation || !destination) {\n                const error = new Error('Coordenadas de início ou destino não fornecidas');\n                error.code = 'INVALID_COORDINATES';\n                throw error;\n            }\n            // Validação específica para objetos LatLng\n            try {\n                const startLat = typeof startLocation.lat === 'function' ? startLocation.lat() : startLocation.lat;\n                const startLng = typeof startLocation.lng === 'function' ? startLocation.lng() : startLocation.lng;\n                const destLat = typeof destination.lat === 'function' ? destination.lat() : destination.lat;\n                const destLng = typeof destination.lng === 'function' ? destination.lng() : destination.lng;\n                if (typeof startLat !== 'number' || typeof startLng !== 'number' || typeof destLat !== 'number' || typeof destLng !== 'number' || isNaN(startLat) || isNaN(startLng) || isNaN(destLat) || isNaN(destLng)) {\n                    const error = new Error('Coordenadas de início ou destino são inválidas');\n                    error.code = 'INVALID_COORDINATES';\n                    error.details = \"Start: \".concat(startLat, \", \").concat(startLng, \" | Dest: \").concat(destLat, \", \").concat(destLng);\n                    throw error;\n                }\n            } catch (error) {\n                const routeError = new Error(\"Erro ao validar coordenadas: \".concat(error instanceof Error ? error.message : 'Erro desconhecido'));\n                routeError.code = 'INVALID_COORDINATES';\n                throw routeError;\n            }\n            if (!passengers || passengers.length === 0) {\n                const error = new Error('Lista de passageiros não fornecida ou vazia');\n                error.code = 'NO_PASSENGERS';\n                throw error;\n            }\n        } catch (error) {\n            if (error.code) {\n                throw error;\n            }\n            const routeError = new Error(\"Erro inesperado na valida\\xe7\\xe3o inicial: \".concat(error instanceof Error ? error.message : 'Erro desconhecido'));\n            routeError.code = 'UNKNOWN_ERROR';\n            throw routeError;\n        }\n        // Valida coordenadas de todos os passageiros\n        for (const passenger of passengers){\n            if (!passenger.position || typeof passenger.position.lat !== 'number' || typeof passenger.position.lng !== 'number' || isNaN(passenger.position.lat) || isNaN(passenger.position.lng)) {\n                const error = new Error(\"Coordenadas inv\\xe1lidas para o passageiro \".concat(passenger.name || 'desconhecido'));\n                error.code = 'INVALID_COORDINATES';\n                error.details = \"Passageiro: \".concat(passenger.name, \", Posi\\xe7\\xe3o: \").concat(JSON.stringify(passenger.position));\n                throw error;\n            }\n        }\n        // Otimiza a ordem dos passageiros se solicitado\n        const orderedPassengers = optimizeOrder ? this.optimizePassengerOrder(startLocation, passengers, destination) : passengers;\n        // Prepara os waypoints para a API do Google\n        const waypoints = orderedPassengers.map((passenger)=>{\n            try {\n                // Validação adicional antes de criar LatLng\n                if (!passenger.position || typeof passenger.position.lat !== 'number' || typeof passenger.position.lng !== 'number' || isNaN(passenger.position.lat) || isNaN(passenger.position.lng)) {\n                    throw new Error(\"Coordenadas inv\\xe1lidas para passageiro \".concat(passenger.name));\n                }\n                return {\n                    location: new google.maps.LatLng(passenger.position.lat, passenger.position.lng),\n                    stopover: true\n                };\n            } catch (error) {\n                console.error(\"Erro ao criar waypoint para passageiro \".concat(passenger.name, \":\"), error);\n                throw error;\n            }\n        });\n        return new Promise((resolve, reject)=>{\n            try {\n                const request = {\n                    origin: startLocation,\n                    destination: destination,\n                    waypoints: waypoints,\n                    travelMode: google.maps.TravelMode.DRIVING,\n                    optimizeWaypoints: false // Usamos nossa própria otimização\n                };\n                this.directionsService.route(request, (directionsResult, status)=>{\n                    try {\n                        if (status === google.maps.DirectionsStatus.OK && directionsResult) {\n                            const route = directionsResult.routes[0];\n                            const leg = route.legs;\n                            // Calcula distância e duração total\n                            let totalDistance = 0;\n                            let totalDuration = 0;\n                            leg.forEach((segment)=>{\n                                if (segment.distance) totalDistance += segment.distance.value;\n                                if (segment.duration) totalDuration += segment.duration.value;\n                            });\n                            // Extrai o caminho da polyline com validação\n                            const polylinePath = [];\n                            if (route.overview_path && Array.isArray(route.overview_path)) {\n                                route.overview_path.forEach((point)=>{\n                                    try {\n                                        // Valida se o ponto tem coordenadas válidas\n                                        const lat = typeof point.lat === 'function' ? point.lat() : point.lat;\n                                        const lng = typeof point.lng === 'function' ? point.lng() : point.lng;\n                                        if (typeof lat === 'number' && typeof lng === 'number' && !isNaN(lat) && !isNaN(lng)) {\n                                            polylinePath.push(point);\n                                        }\n                                    } catch (error) {\n                                        console.warn('Erro ao processar ponto do polyline:', error);\n                                    }\n                                });\n                            }\n                            // Cria os waypoints ordenados com validação\n                            const optimizedWaypoints = [\n                                startLocation\n                            ];\n                            orderedPassengers.forEach((passenger)=>{\n                                try {\n                                    if (passenger.position && typeof passenger.position.lat === 'number' && typeof passenger.position.lng === 'number' && !isNaN(passenger.position.lat) && !isNaN(passenger.position.lng)) {\n                                        optimizedWaypoints.push(new google.maps.LatLng(passenger.position.lat, passenger.position.lng));\n                                    }\n                                } catch (error) {\n                                    console.warn(\"Erro ao criar waypoint para passageiro \".concat(passenger.name, \":\"), error);\n                                }\n                            });\n                            optimizedWaypoints.push(destination);\n                            // Calcula horários estimados de pickup\n                            const pickupTimes = this.calculatePickupTimes(startLocation, orderedPassengers, new Date());\n                            const result = {\n                                waypoints: optimizedWaypoints,\n                                orderedPassengers,\n                                totalDistance: totalDistance / 1000,\n                                totalDuration: totalDuration / 60,\n                                polylinePath,\n                                pickupTimes\n                            };\n                            // Armazena no cache\n                            result.timestamp = Date.now();\n                            const cacheKey = this.getCacheKey(options);\n                            this.routeCache.set(cacheKey, result);\n                            resolve(result);\n                        } else {\n                            const error = new Error(\"Falha ao calcular rota: \".concat(status));\n                            error.code = 'DIRECTIONS_API_ERROR';\n                            error.details = \"Status: \".concat(status);\n                            reject(error);\n                        }\n                    } catch (error) {\n                        const routeError = new Error(\"Erro ao processar resultado da rota: \".concat(error instanceof Error ? error.message : 'Erro desconhecido'));\n                        routeError.code = 'UNKNOWN_ERROR';\n                        reject(routeError);\n                    }\n                });\n            } catch (error) {\n                const routeError = new Error(\"Erro ao criar requisi\\xe7\\xe3o de rota: \".concat(error instanceof Error ? error.message : 'Erro desconhecido'));\n                routeError.code = 'UNKNOWN_ERROR';\n                reject(routeError);\n            }\n        });\n    }\n    /**\n     * Encontra a melhor rota possível, com fallback para rota não otimizada\n     */ async findBestRoute(options) {\n        try {\n            // Aguarda a inicialização do serviço se necessário\n            if (!this.directionsService) {\n                await this.initializeService();\n            }\n            // Tenta calcular rota otimizada\n            return await this.calculateOptimizedRoute(options);\n        } catch (error) {\n            console.warn('Erro ao calcular rota otimizada:', error);\n            // Fallback: rota sem otimização\n            try {\n                return await this.calculateOptimizedRoute({\n                    ...options,\n                    optimizeOrder: false\n                });\n            } catch (fallbackError) {\n                console.error('Erro ao calcular rota de fallback:', fallbackError);\n                // Se ainda assim falhar, retorna uma rota básica com dados estimados\n                return this.createFallbackRoute(options);\n            }\n        }\n    }\n    /**\n     * Cria uma rota de fallback com dados estimados quando a API falha\n     */ createFallbackRoute(options) {\n        const { startLocation, passengers, destination } = options;\n        // Validação e conversão de coordenadas para formato simples\n        if (!startLocation || !destination) {\n            throw new Error('Coordenadas de início ou destino não fornecidas');\n        }\n        const startCoords = {\n            lat: typeof startLocation.lat === 'function' ? startLocation.lat() : startLocation.lat,\n            lng: typeof startLocation.lng === 'function' ? startLocation.lng() : startLocation.lng\n        };\n        const destCoords = {\n            lat: typeof destination.lat === 'function' ? destination.lat() : destination.lat,\n            lng: typeof destination.lng === 'function' ? destination.lng() : destination.lng\n        };\n        // Validação das coordenadas convertidas\n        if (typeof startCoords.lat !== 'number' || typeof startCoords.lng !== 'number' || typeof destCoords.lat !== 'number' || typeof destCoords.lng !== 'number') {\n            throw new Error('Coordenadas inválidas fornecidas');\n        }\n        // Validação dos passageiros e suas coordenadas\n        if (!passengers || passengers.length === 0) {\n            throw new Error('Lista de passageiros não fornecida ou vazia');\n        }\n        // Valida coordenadas de todos os passageiros\n        for (const passenger of passengers){\n            if (!passenger.position || typeof passenger.position.lat !== 'number' || typeof passenger.position.lng !== 'number') {\n                throw new Error(\"Coordenadas inv\\xe1lidas para o passageiro \".concat(passenger.name || 'desconhecido'));\n            }\n        }\n        // Calcula distâncias estimadas usando Haversine\n        let totalDistance = 0;\n        let currentCoords = startCoords;\n        for (const passenger of passengers){\n            const currentLat = typeof currentCoords.lat === 'function' ? currentCoords.lat() : currentCoords.lat;\n            const currentLng = typeof currentCoords.lng === 'function' ? currentCoords.lng() : currentCoords.lng;\n            totalDistance += this.calculateDistance(currentLat, currentLng, passenger.position.lat, passenger.position.lng);\n            currentCoords = passenger.position;\n        }\n        // Adiciona distância até o destino\n        const finalLat = typeof currentCoords.lat === 'function' ? currentCoords.lat() : currentCoords.lat;\n        const finalLng = typeof currentCoords.lng === 'function' ? currentCoords.lng() : currentCoords.lng;\n        totalDistance += this.calculateDistance(finalLat, finalLng, destCoords.lat, destCoords.lng);\n        // Estima duração (assumindo velocidade média de 30 km/h no trânsito urbano)\n        const totalDuration = totalDistance / 30 * 60; // em minutos\n        // Calcula horários estimados simplificados para fallback\n        const pickupTimes = [];\n        const startTime = new Date();\n        let currentTime = new Date(startTime);\n        passengers.forEach((passenger, index)=>{\n            // Adiciona tempo estimado baseado na distância\n            const timeToPassenger = (index + 1) * (totalDuration / passengers.length);\n            currentTime = new Date(startTime.getTime() + timeToPassenger * 60 * 1000);\n            pickupTimes.push({\n                passenger,\n                estimatedPickupTime: new Date(currentTime)\n            });\n        });\n        // Cria waypoints básicos para fallback\n        const fallbackWaypoints = [];\n        try {\n            fallbackWaypoints.push(new google.maps.LatLng(startCoords.lat, startCoords.lng));\n            passengers.forEach((passenger)=>{\n                if (passenger.position) {\n                    fallbackWaypoints.push(new google.maps.LatLng(passenger.position.lat, passenger.position.lng));\n                }\n            });\n            fallbackWaypoints.push(new google.maps.LatLng(destCoords.lat, destCoords.lng));\n        } catch (error) {\n            console.warn('Erro ao criar waypoints de fallback:', error);\n        }\n        return {\n            waypoints: fallbackWaypoints,\n            orderedPassengers: passengers,\n            totalDistance,\n            totalDuration,\n            polylinePath: [],\n            pickupTimes\n        };\n    }\n    /**\n     * Estima o tempo de embarque baseado no número de passageiros\n     */ estimateBoardingTime(passengerCount) {\n        // Estima 30 segundos por passageiro + 1 minuto base\n        return 1 + passengerCount * 0.5;\n    }\n    /**\n     * Calcula o horário estimado de chegada para cada passageiro (método alternativo para compatibilidade)\n     */ calculatePickupTimesFromSegments(startTime, orderedPassengers, routeSegments) {\n        const pickupTimes = [];\n        let currentTime = new Date(startTime);\n        orderedPassengers.forEach((passenger, index)=>{\n            if (index < routeSegments.length) {\n                const segment = routeSegments[index];\n                if (segment.duration) {\n                    currentTime = new Date(currentTime.getTime() + segment.duration.value * 1000);\n                }\n            }\n            pickupTimes.push({\n                passenger,\n                estimatedPickupTime: new Date(currentTime)\n            });\n            // Adiciona tempo de embarque\n            const boardingTime = this.estimateBoardingTime(1);\n            currentTime = new Date(currentTime.getTime() + boardingTime * 60 * 1000);\n        });\n        return pickupTimes;\n    }\n    /**\n     * Gera sugestões de otimização para uma rota\n     */ generateOptimizationSuggestion(passengerCount) {\n        if (passengerCount === 0) {\n            return \"Adicione passageiros para ver sugestões de otimização.\";\n        }\n        if (passengerCount === 1) {\n            return \"✅ Rota simples com 1 passageiro - sem necessidade de otimização.\";\n        }\n        if (passengerCount <= 3) {\n            return \"\\uD83D\\uDE8C Rota com \".concat(passengerCount, \" passageiros - otimiza\\xe7\\xe3o autom\\xe1tica aplicada para minimizar dist\\xe2ncia.\");\n        }\n        if (passengerCount <= 6) {\n            return \"\\uD83C\\uDFAF Rota com \".concat(passengerCount, \" passageiros - algoritmo avan\\xe7ado aplicado (Nearest Neighbor + 2-opt) para m\\xe1xima efici\\xeancia.\");\n        }\n        return \"⚡ Rota complexa com \".concat(passengerCount, \" passageiros - otimiza\\xe7\\xe3o inteligente aplicada. Tempo estimado de economia: \").concat(Math.round(passengerCount * 0.8), \" minutos.\");\n    }\n    /**\n     * Valida se um endereço tem coordenadas válidas\n     */ validateAddress(address, position) {\n        if (!address || address.trim().length < 10) {\n            return false;\n        }\n        if (!position || typeof position.lat !== 'number' || typeof position.lng !== 'number' || isNaN(position.lat) || isNaN(position.lng) || position.lat === 0 && position.lng === 0) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Formata tempo estimado de coleta\n     */ formatPickupTime(estimatedTime) {\n        const now = new Date();\n        const diffMinutes = Math.round((estimatedTime.getTime() - now.getTime()) / (1000 * 60));\n        if (diffMinutes < 0) {\n            return \"Horário passado\";\n        }\n        if (diffMinutes < 60) {\n            return \"\".concat(diffMinutes, \" min\");\n        }\n        const hours = Math.floor(diffMinutes / 60);\n        const minutes = diffMinutes % 60;\n        if (hours < 24) {\n            return \"\".concat(hours, \"h\").concat(minutes > 0 ? \" \".concat(minutes, \"min\") : '');\n        }\n        return estimatedTime.toLocaleDateString('pt-BR', {\n            day: '2-digit',\n            month: '2-digit',\n            hour: '2-digit',\n            minute: '2-digit'\n        });\n    }\n    constructor(){\n        this.directionsService = null;\n        this.distanceCache = new Map();\n        this.routeCache = new Map();\n        this.CACHE_EXPIRY = 5 * 60 * 1000; // 5 minutos\n        this.initializeService();\n        // Limpa cache periodicamente\n        setInterval(()=>this.clearExpiredCache(), 60000); // A cada minuto\n    }\n}\nconst routeOptimizationService = new RouteOptimizationService();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./services/routeOptimizationService.ts\n"));

/***/ })

});